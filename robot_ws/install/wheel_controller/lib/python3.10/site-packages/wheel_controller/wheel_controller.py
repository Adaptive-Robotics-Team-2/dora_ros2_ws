#!/usr/bin/env python3

import rclpy
from rclpy.node import Node
from nav_msgs.msg import Odometry
from geometry_msgs.msg import TransformStamped, Quaternion, Twist
from tf_transformations import quaternion_from_euler
import math
import tf2_ros
import serial
import time

class WheelController(Node):
    def __init__(self):
        super().__init__('wheel_controller')

        # Parameters for wheel base and odometry
        self.R = 0.04  # Wheel radius (meters)
        self.L = 0.215  # Length between front and rear wheels (meters)
        self.W = 0.325  # Width between left and right wheels (meters)

        # Serial communication settings
        try:
            self.serial_port = serial.Serial('/dev/ttyS0', 9600, timeout=0.05)
        except serial.SerialException as e:
            self.get_logger().error(f"Error opening serial port: {e}")
            raise

        self.BUFFERSIZE = 18
        self.inputbuffer = bytearray(self.BUFFERSIZE)
        self.outputbuffer = bytearray(self.BUFFERSIZE)

        # Variables to store position and orientation
        self.x = 0.0
        self.y = 0.0
        self.th = 0.0
        self.dt = 0.01  # Time step (200 Hz)
        self.TICKS_PER_REV = 1440  # Encoder ticks per revolution

        # Publishers and Subscribers
        self.odom_pub = self.create_publisher(Odometry, 'odom', 10)
        self.tf_broadcaster = tf2_ros.TransformBroadcaster(self)
        self.static_tf_broadcaster = tf2_ros.StaticTransformBroadcaster(self)
        self.cmd_vel_sub = self.create_subscription(Twist, 'cmd_vel', self.cmd_vel_callback, 10)

        # Timer for odometry updates
        self.create_timer(self.dt, self.update_odometry)

        self.broadcast_static_tf()

    def read_wheel_data(self):
        """Read encoder data from the robot via serial communication"""
        try:
            if self.inputbuffer == bytearray(self.BUFFERSIZE):
                self.serial_port.write((3).to_bytes(1, byteorder='big'))
                time.sleep(0.001)

            if self.serial_port.in_waiting > 0:
                self.inputbuffer = self.serial_port.read(self.BUFFERSIZE)
                self.get_logger().info(f"Raw serial data: {self.inputbuffer}")

                if self.inputbuffer[0] != 0b11:
                    self.inputbuffer = bytearray(self.BUFFERSIZE)
                    return None
                
                readbuffer = self.inputbuffer[1:-1]
                checksum = self.inputbuffer[-1]
                calc_checksum = sum(readbuffer) & 0xFF
                
                self.inputbuffer = bytearray(self.BUFFERSIZE)

                if checksum != calc_checksum:
                    self.get_logger().error(f"Checksum error: {checksum} != {calc_checksum}")
                    return None
                TICKS_SIZE = 4
                ticks = [int.from_bytes(readbuffer[i * TICKS_SIZE:(i + 1) * TICKS_SIZE], byteorder='big', signed=True) 
                         for i in range(4)]

                return ticks
        except serial.SerialException as e:
            self.get_logger().error(f"Error reading from serial port: {e}")
            return None
        except Exception as e:
            self.get_logger().error(f"Error reading serial data: {e}")
            return None

    def compute_holonomic_odometry(self, delta_ticks):
        """Compute the robot's odometry based on wheel encoder data"""
        def calculate_velocities(delta_ticks):
            omega = [2 * math.pi * ticks / self.TICKS_PER_REV / self.dt for ticks in delta_ticks]
            vx = (self.R / 4) * sum(omega)
            vy = (self.R / 4) * (-omega[0] + omega[1] + omega[2] - omega[3])
            vz = (self.R / (4 * (self.L + self.W))) * (-omega[0] + omega[1] - omega[2] + omega[3])
            return vx, vy, vz

        vx, vy, vz = calculate_velocities(delta_ticks)

        cos_th = math.cos(self.th)
        sin_th = math.sin(self.th)
        dt_vx = vx * self.dt
        dt_vy = vy * self.dt

        self.x += dt_vx * cos_th - dt_vy * sin_th
        self.y += dt_vx * sin_th + dt_vy * cos_th
        self.th += vz * self.dt

        self.get_logger().info(f"x: {self.x:.2f}, y: {self.y:.2f}, th: {self.th:.2f}")
        return self.x, self.y, self.th, vx, vy, vz


    def publish_odometry(self):
        """Publish the odometry message and broadcast the TF"""
        delta_ticks = self.read_wheel_data()
        if delta_ticks is None:
            return

        x, y, th, vx, vy, vth = self.compute_holonomic_odometry(delta_ticks)
        current_time = self.get_clock().now()

        odom = Odometry()
        odom.header.stamp = current_time.to_msg()
        odom.header.frame_id = 'odom'
        odom.child_frame_id = 'base_footprint'

        odom.pose.pose.position.x = x
        odom.pose.pose.position.y = y
        odom_quat = quaternion_from_euler(0, 0, th)
        odom.pose.pose.orientation.x = odom_quat[0]
        odom.pose.pose.orientation.y = odom_quat[1]
        odom.pose.pose.orientation.z = odom_quat[2]
        odom.pose.pose.orientation.w = odom_quat[3]

        odom.twist.twist.linear.x = vx
        odom.twist.twist.linear.y = vy
        odom.twist.twist.angular.z = vth

        self.broadcast_dynamic_tf(x, y, th)
        self.odom_pub.publish(odom)

    def broadcast_dynamic_tf(self, x, y, th):
        """Broadcast the transform for the robot's movement"""
        t = TransformStamped()
        t.header.stamp = self.get_clock().now().to_msg()
        t.header.frame_id = 'odom'
        t.child_frame_id = 'base_footprint'

        t.transform.translation.x = x
        t.transform.translation.y = y
        t.transform.translation.z = 0.0

        quat = quaternion_from_euler(0, 0, th)
        t.transform.rotation.x = quat[0]
        t.transform.rotation.y = quat[1]
        t.transform.rotation.z = quat[2]
        t.transform.rotation.w = quat[3]

        self.tf_broadcaster.sendTransform(t)

    def prepare_serial_data(self, v_fl, v_fr, v_rl, v_rr):
        """Prepare the byte buffer to send wheel velocities"""
        def double_to_bytes(value):
            return int(value * 100).to_bytes(4, byteorder='big', signed=True)

        buffer = bytearray(self.BUFFERSIZE)
        buffer[0] = 0b10
        buffer[1:5] = double_to_bytes(v_fl)
        buffer[5:9] = double_to_bytes(v_fr)
        buffer[9:13] = double_to_bytes(v_rl)
        buffer[13:17] = double_to_bytes(v_rr)
        buffer[-1] = sum(buffer[1:-1]) & 0xFF

        return buffer

    def send_to_serial(self, data):
        """Send data to the robot via serial"""
        try:
            # if self.serial_port.in_waiting > 0:
            #     header = self.serial_port.read(1)
            #     self.get_logger().info(header)
                # if header != b'\x02':
                #     return
            self.serial_port.write(data)
            self.get_logger().info(f"Sent data to serial port: {data}")
        except serial.SerialException as e:
            self.get_logger().error(f"Error writing to serial port: {e}")

    def cmd_vel_callback(self, msg: Twist):
        """Handle incoming cmd_vel messages and send wheel velocities"""
        vx, vy, wz = msg.linear.x, msg.linear.y, msg.angular.z
        v_fl, v_fr, v_rl, v_rr = self.compute_wheel_velocities(vx, vy, wz)

        self.get_logger().info(f"FL: {v_fl:.2f}, FR: {v_fr:.2f}, RL: {v_rl:.2f}, RR: {v_rr:.2f} (rad/s)")

        self.outputbuffer = self.prepare_serial_data(v_fl, v_fr, v_rl, v_rr)
        self.send_to_serial(self.outputbuffer)
        self.outputbuffer = bytearray(self.BUFFERSIZE)

    def compute_wheel_velocities(self, vx, vy, wz):
        """Compute the individual wheel velocities for a mecanum drive"""
        v_fl = (1 / self.R) * (vx - vy - (self.L + self.W) * wz)
        v_fr = (1 / self.R) * (vx + vy + (self.L + self.W) * wz)
        v_rl = (1 / self.R) * (vx + vy - (self.L + self.W) * wz)
        v_rr = (1 / self.R) * (vx - vy + (self.L + self.W) * wz)
        return v_fl, v_fr, v_rl, v_rr

    def broadcast_static_tf(self):
        """Broadcast a static transform between base_link and laser"""
        static_transform_stamped = TransformStamped()

        static_transform_stamped.header.stamp = self.get_clock().now().to_msg()
        static_transform_stamped.header.frame_id = 'base_footprint'
        static_transform_stamped.child_frame_id = 'laser'

        static_transform_stamped.transform.translation.z = 0.06  # Laser 6 cm above base_link
        quat = quaternion_from_euler(0, 0, math.pi)
        static_transform_stamped.transform.rotation.x = quat[0]
        static_transform_stamped.transform.rotation.y = quat[1]
        static_transform_stamped.transform.rotation.z = quat[2]
        static_transform_stamped.transform.rotation.w = quat[3]

        self.static_tf_broadcaster.sendTransform(static_transform_stamped)

    def update_odometry(self):
        """Regular update of odometry information"""
        self.publish_odometry()


def main(args=None):
    rclpy.init(args=args)
    node = WheelController()
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass
    node.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()
 